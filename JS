Retrieve and Store DATA:
----- RETRIEVE -----
var highscoreEl = document.getElementById('highscores');
var retrievedData = localStorage.getItem('scoresData');

function renderHighscore() {
  if (retrievedData) {
    var parsedRetrievedData = JSON.parse(retrievedData);
    highscoreList = parsedRetrievedData;
  } else {
    for (var i = 0; i < randomNames.length; i++) {
      new Player(randomNames[i], scores[i]);
    }
  }
}

----- STORE -----
function storeHighScore() {
  var stringifiedScores = JSON.stringify(highscoreList);
  localStorage.setItem('scoresData', stringifiedScores);
}

// Do this to immediately retrieve data
storeHighScore();
retrievedData = localStorage.getItem('scoresData');

----- RANDOM NUMBER GENERATOR -----
function randomNumber(array) {
  return Math.floor(Math.random() * array.length);
}


----- TIMER -----
var myVar;
function startTimer() {
  myVar = setInterval(function () {
    timeLeft--;

    if (timeLeft >= 0) {
      var timeEl = document.getElementById('timer');
      timeEl.textContent = timeLeft;
    }

    if (timeLeft === 0) {
      finishStatementEl.textContent = 'You Lose!';
      endingAudio[1].play();
      myStopFunction();
      openEndModal();
    }
  }, 1000);
}

function myStopFunction() {
  clearTimeout(myVar);
}



----- SELECT/DROPDOWN -----
When dealing with a dropdown or 'select' element. use on'change' as the event handler. Instead of on'click' for the options.
$('select').on('change', function () {
  let $category = $(this).val();

  if ($category === 'home') {
    $('section').show();

  } else {
    // Hides ALL images
    $('section').hide();

    // Shows images with the class chosen
    $(`.${$category}`).show();
  }
});


----- jQuery -----
When cloning a template, there can be empty elements that you want to set..
Use .find() to target elements within a cloned template.

let $template = $sectionTemplate.clone();
let $newParagraph = $template.find('p');



----- AJAX/THEN -----
A-synchronization: other code will continue to run while the .ajax method retrieves the JSON data. 
Trying to render/work with data at this point may be undefined because the render methods are trying 
to work with data that has not finished processing yet.

$.ajax('./data/path-01.json') {
  .then( data => {
    data.forEach( value => {
      // code block
    });
    // Insert render functions here
  });

----- .concat() -----
let a = 'hi this is a ';
let b = 'STRING!'
a.concat(b)

----- Spread Operator -----
const a = [1,2,3]
const b = [4,5,6]

const(a, b)
const function(arr1, arr2) => {
  arr1.push(...arr2); // Says push everything in this array into the other array
}

----- const variables -----
You are able to add more data to a const variable.
You cannot redeclare a const variable or overwrite existing data


----- const variables -----
const octavia = { fullName: 'Octavia Estelle Butler' };
You are able to add new properties by declaring a property name to the object
and setting a value even though it does not yet exist.

const addBirthYearProperty = (obj, year) => {
  obj.yearBorn = year;
};

const addBirthYearProperty = function(obj, year) {
  obj.yearBorn = year;
};

function addBirthYearProperty(obj, year){
  obj.yearBorn = year;
};


----- SORTiNG -----
const sortByTitle = arr => {
  arr.sort((a, b) => {
    if (a.title.toLowerCase() > b.title.toLowerCase()) {
      return 1; // move to the left
    } else if (a.title.toLowerCase() < b.title.toLowerCase()) {
      return -1; // move to the right
    } else {
      return 0; // do nothing
    }
  });
  return arr;
};

// Sorts By Horns Property
const sortByHorns = arr => {
  // JS Automatically knows which letter comes before the other.
  return arr.sort((a, b) => a.horns > b.horns ? 1 : -1); //true:false
};


----- MUSTACHE -----
  <script id="image-template" type="x-tmpl-mustache">
    <section class="{{ class }}">
      <h2>{{ title }}</h2>
      <img src="{{ image }}" alt="{{ description }}" title="{{ title }}" >
      <p>{{ description }}</p>
    </section>
  </script>


function renderImages(arr, page) {
  arr.forEach(function (value) {

    // MUSTACHE -----
    let $imageTemplate = $('#image-template').html();
    let $rendered = Mustache.render($imageTemplate, {
      class: `${value.keyword} horns${value.horns} ${page}`,
      title: value.title,
      image: value.url,
      description: value.description
    });
    $('#container').append($rendered);
  });
}


----- CHECKING WHAT PAGE YORUE ON -----
let currentPage = 0;


function checkCurrentPage() {
  if (currentPage === 1) {
    $('.page2').hide();
  } else if (currentPage === 2) {
    $('.page1').hide();
  } else if (currentPage === 0) {
    $('.page2').show();
    $('.page1').show();
  }
}
